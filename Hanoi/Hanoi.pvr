<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Hanoi" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="directional" name_space="__global__" name_suffix="0" on="1" persistency="666" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object at="0.5 -1 1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
        <Object accept_root="1" aspect="1" at="-0.00864625 1.16647 -0.0370704" at_dir="0" base_name="Default" far="512" fov="1.0472" from="0.0443825 1.37528 -1.48798" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="hand" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if not hasattr(VR, 'isDragging'): 
		VR.isDragging = False
		
	glove = VR.find('vrpn_device')
	b = VR.find('ART_tracker.2')
	
	if not glove or not b:
		print 'no glove or beacon'
		return
	
	#print VR.find('vrpn_device_av_ray')
	
	glove.setBeacon(b)
	VR.find('vrpn_device_av_ray').show()

	
	def startDrag():
		if glove.intersect(VR.getRoot()):
			VR.isDragging = True
			print "Attempting to start dragging, found intersecting object(s)."
			obj = glove.getIntersected()
			print "Intersecting Object:" + str(obj)
			glove.drag(obj)
		else:
			print "Attempting to start dragging, but no intersecting object."
		
	def stopDrag():
		VR.isDragging = False
		glove.drop()
	
	if hasattr(glove, 'getSlider') and hasattr(glove, 'setBeacon'):
		num = glove.getSlider(100) # bend sensor data
		glove.setBeacon(b)
	else:
		num = 0	
	
	# If gripping while not dragging the handle, start dragging it.
	if num &gt;= 10 and not VR.isDragging:
		VR.fGlove = 0
		VR.touchedHandle = True
		startDrag()
		
	# If loosening the grip while dragging the handle, stop dragging it.
	# Also stio dragging if a challenge is running
	if (num &lt; 10 and VR.isDragging):
		VR.fGlove = 1
		stopDrag()
		

</core>
      <trig type="on_timeout" dev="" state="Pressed" param="50" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	# set camera
	camera = VR.find("Default")
	
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'light')

	
	
	#textures
	boden = VR.Material('boden')
	boden.setTexture('./Textures/boden6.jpg')
	
	boden.setTextureWrapping('GL_REPEAT', 'GL_REPEAT')
	walls = VR.Material('walls')
	
	walls.setTexture('./Textures/tapete.jpg')
	
	#Ground	
	g = VR.Geometry('g')
	g.setPrimitive('Box 20 2 20 1 1 1')
	g.setFrom([0,-1,0])
	ground = VR.CSGGeometry('ground')
	ground.addChild(g)
	VR.scene.addChild(ground)
	g.setMaterial(boden)
	
	
	#Walls
	wallR = VR.Geometry('wallR')
	wallR.setPrimitive('Box 0.2 6 20 1 1 1')
	wallR.setFrom([10,1,0])
	VR.scene.addChild(wallR)
	wallR.setMaterial(walls)
	
	wallL = VR.Geometry('wallL')
	wallL.setPrimitive('Box 0.2 6 20 1 1 1')
	wallL.setFrom([-10,1,0])
	wallL.setMaterial(walls)
	VR.scene.addChild(wallL)
	
	wallF = VR.Geometry('wallF')
	wallF.setPrimitive('Box 0.2 6 20 1 1 1')
	wallF.setFrom([0,1,-10])
	wallF.setAt([10,1,-10])
	wallF.setMaterial(walls)
	VR.scene.addChild(wallF)
	
	wallB = VR.Geometry('wallB')
	wallB.setPrimitive('Box 0.2 6 20 1 1 1')
	wallB.setFrom([0,1,10])
	wallB.setAt([-10,1,10])
	wallB.setMaterial(walls)
	VR.scene.addChild(wallB)
	

	#Table
	table = VR.loadGeometry('table.dae')
	table.setFrom([0,0,0])
	table.setDir([0,-200,1])
	VR.scene.addChild(table)
	VR.table = table
	
	#Staender
	st1 = VR.loadGeometry('staender_3ringe.dae')
	st1.setPose([1,1,0], [0,-1,0], [0,0,1])
	st1.setPickable(True)
	VR.scene.addChild(st1)
	
	st2 = VR.loadGeometry('./staender.dae')
	st2.setPose([0,1,0], [0,-1,0], [0,0,1])
	VR.scene.addChild(st2)
	
	st3 = VR.loadGeometry('./staender.dae')
	st3.setPose([-1,1,0], [0,-1,0], [0,0,1])
	VR.scene.addChild(st3)
	
	
	VR.setPhysicsActive(False)
	
	g.physicalize(True, False, "Convex")
	table.physicalize(True, False, "Convex")
	st1.find("staender").physicalize(True, False, "Concave")
	
	
	for st in [st1, st2, st3]:
		st.physicalize(True, False, "Concave")
		st.setPickable(False)
	
	
	for scheibenName in ["scheibe1", "scheibe2", "scheibe3"]:
		scheibe = st1.find(scheibenName)
		scheibe.setPickable(True)
		# default parameters: 0.1 0.0 2 100 100 False False False
		# better parameters: 0.0 0.0 12 100 100 False False False
		scheibe.setConvexDecompositionParameters(0, 0, 8, 100, 100, True, True, True)
		scheibe.physicalize(True, True, "ConvexDecomposed")
		scheibe.setCollisionMargin(0.002)
	
	VR.setPhysicsActive(True)
	
	camera.setFrom([0.0443825, 1.37528, -1.48798])
	camera.setAt([-0.00864625, 1.16647,  -0.0370704])
	camera.setAt(VR.table.getFrom())
	
	
	
	
	
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="3"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
