<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Ball" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="7.995 0.936279 0.84516" at_dir="0" base_name="Default" far="512" fov="1.0472" from="-19.801 14.9683 6.22265" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="controlHandleDrag" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
    import VR
   
    # must run on loop trigger
   
    if not hasattr(VR, 'isDragging'):
        VR.isDragging = False
       
    glove = VR.find('vrpn_device')
   
    b = VR.find('ART_tracker.1')
    glove.setBeacon(b)
    b.findAll('av_ray')[0].show()  
   
    def startDrag():
        if glove.intersect(VR.getRoot()):
            VR.isDragging = True
            print "Attempting to start dragging, found intersecting object(s)."
            obj = glove.getIntersected()
            print "Intersecting Object:" + str(obj)
            glove.drag(obj)
        else:
            print "Attempting to start dragging, but no intersecting object."
       
    def stopDrag():
        VR.isDragging = False
        glove.drop()
   
    if hasattr(glove, 'getSlider') and hasattr(glove, 'setBeacon'):
        num = glove.getSlider(100) # bend sensor data
        glove.setBeacon(VR.find('ART_tracker.1'))
    else:
        num = 0
   
   
    # If gripping while not dragging the handle, start dragging it.
    if num &gt;= 20 and not VR.isDragging:
        VR.fGlove = 0
        VR.touchedHandle = True
        startDrag()
       
    # If loosening the grip while dragging the handle, stop dragging it.
    # Also stio dragging if a challenge is running
    if (num &lt; 20 and VR.isDragging) or VR.isChallenge:
        VR.fGlove = 1
        stopDrag()
</core>
      <trig type="on_device" dev="vrpn_device" state="Drop" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'light')
	
	camera = VR.find("Default")
	#camera.setFrom([1.29085,3.45875,7.2381])
	#camera.setAt([1.3, 2.6, 0.644217])
	
	#WireLoopS
	obj1 = VR.loadGeometry('./Ball.dae')
	obj1.setPose([0,0,0], [0,-1,0], [0,0,1])
	VR.scene.addChild(obj1)
	
	#addCans
	cans = obj1.findAll('Cylinder')
	
	#addothers
	table1 = obj1.findAll('Cube_001')[0]
	stander = obj1.findAll('staender')[0]
	ball1 = obj1.findAll('Sphere')[0]
	ground = obj1.findAll('ground')[0]
	rutsche = obj1.findAll('Rut1')[0]
	
	#pickBall
	ball1.setPickable(1)

	#addGravity
	ground.physicalize(True, False, 'Concave',0)
	
	stander.physicalize(True, False, 'Concave',0)
	ball1.setMass(10)
	ball1.setDamping(0,0)
	ball1.physicalize(True, True, 'Sphere',0.375)
	table1.physicalize(True, False, 'Convex',0)
	rutsche.physicalize(True, False, 'Concave',0)
	
	rutsche.setPickable(1)
	
	for can in cans:
		can.setMass(0.1)
		can.physicalize(True, True, 'Convex',0)
		
	

</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="reset" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	print 'reset'
	
	VR.init()
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="114" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
